{"version":3,"sources":["components/star/star.js","components/sun/sun.js","components/planet/planet.js","components/solar.system/solar.system.js","App.js","serviceWorker.js","reducers/stars.config.js","reducers/sun.config.js","constants/index.js","reducers/planet.config.js","reducers/index.js","store/index.js","index.js"],"names":["Star","props","starRef","React","createRef","state","config","this","setState","delay","Math","random","el","d3","current","comp_ref","blink","attr","transition","duration","size","on","star_reference","star_properties","center_x","location","center_y","color","cx","r","cy","fill","ref","Component","Sun","sun_properties","id","fx","fy","offset","style","stopColor","stopOpacity","Planet","planetRef","start_angle","PI","x_radius","distance","y_radius","plant_ref","arc","innerRadius","outerRadius","startAngle","endAngle","select","planet_body","direction","rotation_direction","revolution_time","ease","attrTween","t","cos","sin","planet_properties","distance_from_sun","rx","ry","start_ang","planet_size","rotation_time","x_translate","revolution_direction","SQRT2","transform","strokeWidth","SolarSystem","stars_config","starsReducer","sun_config","sunReducer","planet_config","planetsReducer","className","map","star","index","key","planet","connect","App","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","action","type","total_stars","i","star_config","push","solar_system_config","diameter_ratio","revolution_period","planet_size_scale","domain","range","planet_distance_scale","planet_revolution_scale","planets","rootReducer","combineReducers","loggerMiddleware","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.81c60cc4.chunk.js","sourcesContent":["import React, {Component } from 'react';\r\nimport * as d3 from \"d3\";\r\n\r\n\r\n\r\nclass Star extends Component {\r\n\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n          config: props\r\n        };\r\n    }\r\n\r\n    starRef = React.createRef();\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n          config: this.props,\r\n          delay : Math.random() * 1000\r\n        });\r\n    }\r\n\r\n    componentDidUpdate() {        \r\n        let el = d3.select(this.starRef.current);\r\n        var comp_ref = this;\r\n        //this.repeat(el);\r\n        if(!this.state.config.config.blink) return;\r\n        el.attr(\"r\", 0.2).transition().delay(this.state.delay)\r\n        .duration(1600)\r\n        .attr(\"r\", this.state.config.config.size)\r\n        .transition()\r\n        .attr(\"r\", 0.2)\r\n        .on(\"end\", function() {\r\n            comp_ref.setState({...this.state});\r\n        });\r\n    }\r\n\r\n    repeat(star_reference) {\r\n        star_reference.attr(\"r\", 2).transition()\r\n        .duration(1600)\r\n        .attr(\"r\", 5);\r\n    }\r\n\r\n    render() {\r\n        var star_properties = this.state.config.config;\r\n        var center_x = star_properties.location[0];\r\n        var center_y = star_properties.location[1];\r\n        var size = star_properties.size;\r\n        var color = star_properties.color ? star_properties.color : \"white\";\r\n\r\n        return <circle cx={center_x} r ={size} cy={center_y} fill={color} ref={this.starRef} ></circle>\r\n    }\r\n}\r\n\r\nexport default Star;","import React, {Component } from 'react';\r\nimport * as d3 from \"d3\";\r\n\r\n\r\n\r\nclass Sun extends Component {\r\n\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n          config: props\r\n        };\r\n    }\r\n\r\n    starRef = React.createRef();\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n          config: this.props\r\n        });\r\n    }\r\n\r\n    /*\r\n    componentDidUpdate() {       \r\n        //let el = d3.select(this.starRef.current);\r\n        let el = d3.select(\"#sunBurst\");\r\n        var comp_ref = this;\r\n        //this.repeat(el);\r\n        el.attr(\"r\", this.state.config.config.size).transition()\r\n        .duration(3000)\r\n        .delay(500)\r\n        .attr(\"r\", 25*this.state.config.config.size)\r\n        .on(\"end\", function() {\r\n            comp_ref.setState({...this.state});\r\n        });\r\n    }\r\n    */\r\n    render() {\r\n        var sun_properties = this.state.config.config;\r\n        var center_x = sun_properties.location[0];\r\n        var center_y = sun_properties.location[1];\r\n        var size = sun_properties.size;\r\n        var color = sun_properties.color ? sun_properties.color : \"orange\";\r\n        return <g>\r\n            <defs>\r\n                <radialGradient id=\"grad1\" cx=\"50%\" cy=\"50%\" r=\"50%\" fx=\"50%\" fy=\"50%\">\r\n                    <stop offset=\"0%\" style={{stopColor: \"FFFF66\", stopOpacity:1}}/>\r\n                    <stop offset=\"100%\" style={{stopColor:\"FF9900\", stopOpacity:1}} />\r\n                </radialGradient>\r\n            </defs>\r\n        <circle id=\"sunBurst\" cx={center_x} r={size} cy={center_y} fill=\"url(#grad1)\" ref={this.starRef} ></circle></g>\r\n        \r\n    }\r\n}\r\n\r\nexport default Sun;","import React, {Component } from 'react';\r\nimport * as d3 from \"d3\";\r\n\r\n\r\n\r\nclass Planet extends Component {\r\n\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n          config: props,\r\n          delay : Math.random() * 5000,\r\n          start_angle : Math.PI * 2 *Math.random()\r\n        };\r\n    }\r\n\r\n    planetRef = React.createRef();\r\n\r\n    componentDidMount() {\r\n        this.setState({...this.state});\r\n    }\r\n\r\n    componentDidUpdate() {       \r\n        let el = d3.select(this.planetRef.current);\r\n        var x_radius = this.props.config.distance * (1.1);\r\n        var y_radius = this.props.config.distance * (0.8);\r\n        let plant_ref = this;\r\n        var arc = d3.arc()\r\n                    .innerRadius(x_radius)\r\n                    .outerRadius(x_radius + 0.5)\r\n                    .startAngle(0)  \r\n                    .endAngle(2*Math.PI);\r\n                    \r\n        var trajectory = el.select('path');\r\n            trajectory.attr(\"d\", arc());\r\n        var planet_body = el.select('circle');\r\n        var direction = this.props.config.rotation_direction === true ? 1 : -1;\r\n            \r\n            planet_body.transition().duration(this.props.config.revolution_time).ease(d3.easeLinear)\r\n                        .attrTween(\"cx\", function() {\r\n                            return function(t) {\r\n                                return x_radius*Math.cos(direction* ((Math.PI * 2 *t) + plant_ref.state.start_angle));\r\n                            };\r\n                        })\r\n                        .attrTween(\"cy\", function() {\r\n                            return function(t) {\r\n                                return y_radius*Math.sin(direction * ((Math.PI * 2 *t) + plant_ref.state.start_angle));\r\n                            };\r\n                        }).on(\"end\", function() {\r\n                            plant_ref.setState({...this.state});\r\n                        });\r\n    }\r\n\r\n    render() {\r\n        var planet_properties = this.state.config.config;\r\n        var distance_from_sun = planet_properties.distance;\r\n        var rx = (1.1)*distance_from_sun;\r\n        var ry = (0.8)*distance_from_sun;\r\n        var start_ang = this.state.start_angle;\r\n        var planet_size = planet_properties.size;\r\n        var revolution_time = planet_properties.revolution_time;\r\n        var rotation_time = planet_properties.rotation_time;\r\n        var color = planet_properties.color;\r\n        var x_translate = 20 * planet_properties.revolution_direction;\r\n        var radius = this.props.config.distance * Math.SQRT2;\r\n        return <g ref={this.planetRef} transform={\"translate(\" + (400 + x_translate) + \",300)\"}><ellipse rx={rx} ry={ry} fill=\"none\" strokeWidth=\"2\" style={{\"opacity\" : 0, \"stroke\" : color}}></ellipse><circle cx={rx*Math.cos(start_ang)} r={planet_size} cy={ry*Math.sin(start_ang)} fill={color} ></circle>\r\n        </g>\r\n        \r\n    }\r\n}\r\n\r\nexport default Planet;","import React, {Component } from 'react';\r\nimport Star from './../star/star';\r\nimport { connect } from \"react-redux\";\r\nimport Sun from '../sun/sun';\r\nimport Planet from '../planet/planet';\r\n\r\n\r\nclass SolarSystem extends Component {\r\n\r\n    render() {\r\n        var stars_config = this.props.starsReducer;\r\n        var sun_config = this.props.sunReducer;\r\n        var planet_config = this.props.planetsReducer;\r\n        return <svg className=\"container bg-dark\" style={{\"height\" : \"600px\", \"width\" : \"800px\"}}>{stars_config.map((star, index) => {\r\n            return <Star key={index} config={star}></Star>\r\n        }\r\n        )}\r\n        {planet_config.map((planet, index) => {\r\n            return <Planet key={index} config={planet}></Planet>\r\n        }\r\n        )}\r\n        <Sun config={sun_config}></Sun>\r\n        </svg>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return state;\r\n}\r\n\r\nexport default connect(mapStateToProps)(SolarSystem);","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport SolarSystem from './components/solar.system/solar.system';\n\nfunction App() {\n  return (\n    <SolarSystem></SolarSystem>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nconst starsReducer = (state = null, action) => {\r\n    switch(action.type) {\r\n        default:\r\n            var total_stars = [];\r\n            for(let i = 0; i < 200; i++) {\r\n                var size = 0.5 + Math.random()*0.5;\r\n                var star_config = {\r\n                    location : [Math.random() * 800, Math.random() * 800],\r\n                    size :  size,\r\n                    blink : Math.random() > 0.75,\r\n                    color : \"white\"\r\n                };\r\n                total_stars.push(star_config);\r\n            }\r\n            return total_stars;\r\n    }\r\n}\r\n\r\nexport default starsReducer;","const sunReducer = (state = null, action) => {\r\n    switch(action.type) {\r\n        default:\r\n            var star_config = {\r\n                location : [400, 300],\r\n                size : 20,\r\n                color : \"yellow\"\r\n            };\r\n            return star_config;\r\n    }\r\n}\r\n\r\nexport default sunReducer;","let diameter_ratio = [0.383, 0.949, 1,  0.532, 11.21, 9.45, 4.01, 3.88, 0.186];\r\nlet revolution_period = [0.2, 0.6, 1, 1.9, 11.9, 29.5, 84, 164.8, 248];\r\nlet distance_from_sun = [0.387, 0.723, 1, 1.52, 5.20, 9.58, 19.20, 30.05,39.48];\r\n\r\nexport const solar_system_config = {diameter_ratio, revolution_period, distance_from_sun};","import * as d3 from 'd3';\r\nimport {solar_system_config} from './../constants/index';\r\n\r\nexport const planet_size_scale = d3.scaleLinear()\r\n                            .domain([0, 12])\r\n                            .range([1, 6]); // 1, 6\r\n\r\nexport const planet_distance_scale = d3.scalePow()\r\n                            .domain([0, 40])\r\n                            .range([40, 350/Math.SQRT2]);  \r\n\r\nexport const planet_revolution_scale = d3.scaleLinear()\r\n                        .domain([0.2, 250])\r\n                        .range([5000, 150000]);  \r\n\r\nconst planetsReducer = (state = null, action) => {\r\n    switch(action.type) {\r\n        default:\r\n            var total_planets = [];            \r\n            var planets = [{\"name\" : \"Mercury\",\"color\" : \"gray\", \"rotation_time\" :2000},\r\n            {\"name\" : \"Venus\", \"color\" : \"LightYellow\", \"rotation_time\" :2000},\r\n            {\"name\" : \"Earth\",  \"color\" : \"blue\", \"rotation_time\" :2000},\r\n            {\"name\" : \"Mars\", \"color\" : \"#654321\",\"rotation_time\" :2000},\r\n            {\"name\" : \"Jupiter\", \"color\" : \"Orange\", \"rotation_time\" :2000},\r\n            {\"name\" : \"Saturn\", \"color\" : \"PaleGoldenRod\", \"rotation_time\" :2000},\r\n            {\"name\" : \"Uranus\", \"color\" : \"SlateBlue \", \"rotation_time\" :2000},\r\n            {\"name\" : \"Neptune\", \"color\" : \"#6081FF\", \"rotation_time\" :2000},\r\n            {\"name\" : \"Pluto\", \"color\" : \"RosyBrown\", \"rotation_time\" :2000}]\r\n            for(let i = 0; i < 9; i++) {\r\n                planets[i].size = planet_size_scale(solar_system_config.diameter_ratio[i]);\r\n                planets[i].distance = planet_distance_scale(solar_system_config.distance_from_sun[i]);\r\n                planets[i].revolution_time = planet_revolution_scale(solar_system_config.revolution_period[i]);\r\n                planets[i].revolution_direction = (Math.random() > 0.5) ? 1 : 1;\r\n            }\r\n            return planets;\r\n    }\r\n}\r\n\r\nexport default planetsReducer;  ","import { combineReducers } from 'redux';\r\nimport starsReducer from './stars.config';\r\nimport sunReducer from './sun.config';\r\nimport planetsReducer from './planet.config';\r\nconst rootReducer = combineReducers({\r\n    starsReducer,\r\n    sunReducer,\r\n    planetsReducer\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\nimport rootReducer from \"../reducers/index\";\r\n\r\nconst loggerMiddleware = createLogger();\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(\r\n        thunkMiddleware,\r\n        loggerMiddleware\r\n    )\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from \"react-redux\";\nimport store from './store/';\n\nReactDOM.render( <Provider store={store}> <App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}